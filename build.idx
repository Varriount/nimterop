sanitizePath	build.html#sanitizePath,string	build: sanitizePath(path: string; noQuote = false; sep = $&apos;/&apos;): string	
Config	build.html#Config	build: Config	
getProjectDir	build.html#getProjectDir	build: getProjectDir(): string	
getNimcacheDir	build.html#getNimcacheDir,string	build: getNimcacheDir(projectDir = &quot;&quot;): string	
getNimConfig	build.html#getNimConfig,string	build: getNimConfig(projectDir = &quot;&quot;): Config	
getNimConfigFlags	build.html#getNimConfigFlags,string	build: getNimConfigFlags(projectDir = &quot;&quot;): string	
writeNimConfig	build.html#writeNimConfig,string,string	build: writeNimConfig(cfgFile: string; projectDir = &quot;&quot;)	
sleep	build.html#sleep,int	build: sleep(milsecs: int)	
getCurrentNimCompiler	build.html#getCurrentNimCompiler	build: getCurrentNimCompiler(): string	
execAction	build.html#execAction,string,int,string	build: execAction(cmd: string; retry = 0; die = true; cache = false; cacheKey = &quot;&quot;): tuple[\n    output: string, ret: int]	
findExe	build.html#findExe,string	build: findExe(exe: string): string	
mkDir	build.html#mkDir,string	build: mkDir(dir: string)	
cpFile	build.html#cpFile,string,string	build: cpFile(source, dest: string; move = false)	
mvFile	build.html#mvFile,string,string	build: mvFile(source, dest: string)	
rmFile	build.html#rmFile,string	build: rmFile(source: string; dir = false)	
rmDir	build.html#rmDir,string	build: rmDir(dir: string)	
getProjectCacheDir	build.html#getProjectCacheDir,string	build: getProjectCacheDir(name: string; forceClean = true): string	
extractZip	build.html#extractZip,string,string	build: extractZip(zipfile, outdir: string)	
extractTar	build.html#extractTar,string,string	build: extractTar(tarfile, outdir: string)	
downloadUrl	build.html#downloadUrl,string,string	build: downloadUrl(url, outdir: string)	
gitReset	build.html#gitReset,string	build: gitReset(outdir: string)	
gitCheckout	build.html#gitCheckout,string,string	build: gitCheckout(file, outdir: string)	
gitPull	build.html#gitPull,string,string,string,string	build: gitPull(url: string; outdir = &quot;&quot;; plist = &quot;&quot;; checkout = &quot;&quot;)	
findFile	build.html#findFile,string,string	build: findFile(file: string; dir: string; recurse = true; first = false; regex = false): string	
flagBuild	build.html#flagBuild,string,openArray[string]	build: flagBuild(base: string; flags: openArray[string]): string	
linkLibs	build.html#linkLibs,openArray[string]	build: linkLibs(names: openArray[string]; staticLink = true): string	
configure	build.html#configure,string,string,string	build: configure(path, check: string; flags = &quot;&quot;)	
getCmakeIncludePath	build.html#getCmakeIncludePath,openArray[string]	build: getCmakeIncludePath(paths: openArray[string]): string	
setCmakeProperty	build.html#setCmakeProperty,string,string,string,string	build: setCmakeProperty(outdir, name, property, value: string)	
setCmakeLibName	build.html#setCmakeLibName,string,string,string,string,string	build: setCmakeLibName(outdir, name, prefix = &quot;&quot;; oname = &quot;&quot;; suffix = &quot;&quot;)	
setCmakePositionIndependentCode	build.html#setCmakePositionIndependentCode,string	build: setCmakePositionIndependentCode(outdir: string)	
cmake	build.html#cmake,string,string,string	build: cmake(path, check, flags: string)	
make	build.html#make,string,string,string	build: make(path, check: string; flags = &quot;&quot;; regex = false)	
getCompilerMode	build.html#getCompilerMode,string	build: getCompilerMode(path: string): string	
getGccModeArg	build.html#getGccModeArg,string	build: getGccModeArg(mode: string): string	
getCompiler	build.html#getCompiler	build: getCompiler(): string	
getGccPaths	build.html#getGccPaths,string	build: getGccPaths(mode: string): seq[string]	
getGccLibPaths	build.html#getGccLibPaths,string	build: getGccLibPaths(mode: string): seq[string]	
setDefines	build.html#setDefines.m	build: setDefines(defs: static openArray[string]): untyped	
clearDefines	build.html#clearDefines.m	build: clearDefines(): untyped	
isDefined	build.html#isDefined.m,untyped	build: isDefined(def: untyped): untyped	
getHeader	build.html#getHeader.m,static[string],static[string],static[string],static[string],static[string],static[string],static[string],static[string]	build: getHeader(header: static[string]; giturl: static[string] = &quot;&quot;;\n          dlurl: static[string] = &quot;&quot;; outdir: static[string] = &quot;&quot;;\n          conFlags: static[string] = &quot;&quot;; cmakeFlags: static[string] = &quot;&quot;;\n          makeFlags: static[string] = &quot;&quot;; altNames: static[string] = &quot;&quot;): untyped	
