gDebug	build.html#gDebug	build: gDebug	
gDebugCT	build.html#gDebugCT	build: gDebugCT	
gNimExe	build.html#gNimExe	build: gNimExe	
sanitizePath	build.html#sanitizePath,string	build: sanitizePath(path: string; noQuote = false; sep = $&apos;/&apos;): string	
getCurrentNimCompiler	build.html#getCurrentNimCompiler	build: getCurrentNimCompiler(): string	
compareVersions	build.html#compareVersions,string,string	build: compareVersions(ver1, ver2: string): int	
Config	build.html#Config	build: Config	
getProjectDir	build.html#getProjectDir	build: getProjectDir(): string	
getNimConfig	build.html#getNimConfig,string	build: getNimConfig(projectDir = &quot;&quot;): Config	
getNimConfigFlags	build.html#getNimConfigFlags,string	build: getNimConfigFlags(projectDir = &quot;&quot;): string	
writeNimConfig	build.html#writeNimConfig,string,string	build: writeNimConfig(cfgFile: string; projectDir = &quot;&quot;)	
getNimcacheDir	build.html#getNimcacheDir,string	build: getNimcacheDir(projectDir = &quot;&quot;): string	
getOutDir	build.html#getOutDir,string	build: getOutDir(projectDir = &quot;&quot;): string	
sleep	build.html#sleep,int	build: sleep(milsecs: int)	
execAction	build.html#execAction,string,int,string,proc)	build: execAction(cmd: string; retry = 0; die = true; cache = false; cacheKey = &quot;&quot;;\n           onRetry: proc () = nil): tuple[output: string, ret: int]	
findExe	build.html#findExe,string	build: findExe(exe: string): string	
mkDir	build.html#mkDir,string	build: mkDir(dir: string)	
cpFile	build.html#cpFile,string,string	build: cpFile(source, dest: string; psymlink = false; move = false)	
mvFile	build.html#mvFile,string,string	build: mvFile(source, dest: string)	
rmFile	build.html#rmFile,string	build: rmFile(source: string; dir = false)	
rmDir	build.html#rmDir,string	build: rmDir(dir: string)	
cleanDir	build.html#cleanDir,string	build: cleanDir(dir: string)	
cpTree	build.html#cpTree,string,string	build: cpTree(source, dest: string; move = false)	
mvTree	build.html#mvTree,string,string	build: mvTree(source, dest: string)	
getFileDate	build.html#getFileDate,string	build: getFileDate(fullpath: string): string	
touchFile	build.html#touchFile,string	build: touchFile(fullpath: string)	
extractZip	build.html#extractZip,string,string	build: extractZip(zipfile, outdir: string; quiet = false)	
extractTar	build.html#extractTar,string,string	build: extractTar(tarfile, outdir: string; quiet = false)	
downloadUrl	build.html#downloadUrl,string,string,int	build: downloadUrl(url, outdir: string; quiet = false; retry = 1)	
gitReset	build.html#gitReset,string	build: gitReset(outdir: string)	
gitCheckout	build.html#gitCheckout,string,string	build: gitCheckout(file, outdir: string)	
gitPull	build.html#gitPull,string,string,string,string	build: gitPull(url: string; outdir = &quot;&quot;; plist = &quot;&quot;; checkout = &quot;&quot;; quiet = false)	
gitTags	build.html#gitTags,string	build: gitTags(outdir: string): seq[string]	
findFiles	build.html#findFiles,string,string	build: findFiles(file: string; dir: string; recurse = true; regex = false): seq[string]	
findFile	build.html#findFile,string,string	build: findFile(file: string; dir: string; recurse = true; first = false; regex = false): string	
linkLibs	build.html#linkLibs,openArray[string]	build: linkLibs(names: openArray[string]; staticLink = true): string	
getNumProcs	build.html#getNumProcs	build: getNumProcs(): string	
getProjectCacheDir	build.html#getProjectCacheDir,string	build: getProjectCacheDir(name: string; forceClean = true): string	
getCompilerMode	build.html#getCompilerMode,string	build: getCompilerMode(path: string): string	
getGccModeArg	build.html#getGccModeArg,string	build: getGccModeArg(mode: string): string	
getCompiler	build.html#getCompiler	build: getCompiler(): string	
getGccPaths	build.html#getGccPaths,string	build: getGccPaths(mode: string): seq[string]	
getGccLibPaths	build.html#getGccLibPaths,string	build: getGccLibPaths(mode: string): seq[string]	
getGccInfo	build.html#getGccInfo	build: getGccInfo(): tuple[arch, os, compiler, version: string]	
btAutoconf	build.html#btAutoconf	BuildType.btAutoconf	
btCmake	build.html#btCmake	BuildType.btCmake	
BuildType	build.html#BuildType	build: BuildType	
configure	build.html#configure,string,string,string	build: configure(path, check: string; flags = &quot;&quot;)	
getCmakeIncludePath	build.html#getCmakeIncludePath,openArray[string]	build: getCmakeIncludePath(paths: openArray[string]): string	
setCmakeProperty	build.html#setCmakeProperty,string,string,string,string	build: setCmakeProperty(outdir, name, property, value: string)	
setCmakeLibName	build.html#setCmakeLibName,string,string,string,string,string	build: setCmakeLibName(outdir, name, prefix = &quot;&quot;; oname = &quot;&quot;; suffix = &quot;&quot;)	
setCmakePositionIndependentCode	build.html#setCmakePositionIndependentCode,string	build: setCmakePositionIndependentCode(outdir: string)	
cmake	build.html#cmake,string,string,string	build: cmake(path, check, flags: string)	
make	build.html#make,string,string,string	build: make(path, check: string; flags = &quot;&quot;; regex = false)	
flagBuild	build.html#flagBuild,string,openArray[string]	build: flagBuild(base: string; flags: openArray[string]): string	
ConanPackage	build.html#ConanPackage	build: ConanPackage	
ConanBuild	build.html#ConanBuild	build: ConanBuild	
addAltConanBaseUrl	build.html#addAltConanBaseUrl,string,string	build: addAltConanBaseUrl(name, url: string)	
`==`	build.html#==,ConanPackage,ConanPackage	build: `==`(pkg1, pkg2: ConanPackage): bool	
newConanPackage	build.html#newConanPackage,string,string,string,string,string	build: newConanPackage(name, version, user = &quot;_&quot;; channel = &quot;_&quot;; bhash = &quot;&quot;; shared = true): ConanPackage	
newConanPackageFromUri	build.html#newConanPackageFromUri,string	build: newConanPackageFromUri(uri: string; shared = true): ConanPackage	
getUriFromConanPackage	build.html#getUriFromConanPackage,ConanPackage	build: getUriFromConanPackage(pkg: ConanPackage): string	
searchConan	build.html#searchConan,string,string,string,string	build: searchConan(name: string; version = &quot;&quot;; user = &quot;&quot;; channel = &quot;&quot;): ConanPackage	
searchConan	build.html#searchConan,ConanPackage	build: searchConan(pkg: ConanPackage): ConanPackage	
getConanBuilds	build.html#getConanBuilds,ConanPackage,string	build: getConanBuilds(pkg: ConanPackage; filter = &quot;&quot;)	
getConanRevisions	build.html#getConanRevisions,ConanPackage,ConanBuild	build: getConanRevisions(pkg: ConanPackage; bld: ConanBuild)	
loadConanInfo	build.html#loadConanInfo,string	build: loadConanInfo(outdir: string): ConanPackage	
saveConanInfo	build.html#saveConanInfo,ConanPackage,string	build: saveConanInfo(pkg: ConanPackage; outdir: string)	
dlConanBuild	build.html#dlConanBuild,ConanPackage,ConanBuild,string,string	build: dlConanBuild(pkg: ConanPackage; bld: ConanBuild; outdir: string; revision = &quot;&quot;)	
dlConanRequires	build.html#dlConanRequires,ConanPackage,ConanBuild,string	build: dlConanRequires(pkg: ConanPackage; bld: ConanBuild; outdir: string)	
downloadConan	build.html#downloadConan,ConanPackage,string	build: downloadConan(pkg: ConanPackage; outdir: string; main = true)	
getConanLDeps	build.html#getConanLDeps,ConanPackage,string	build: getConanLDeps(pkg: ConanPackage; outdir: string; main = true): seq[string]	
JBBPackage	build.html#JBBPackage	build: JBBPackage	
`==`	build.html#==,JBBPackage,JBBPackage	build: `==`(pkg1, pkg2: JBBPackage): bool	
newJBBPackage	build.html#newJBBPackage,string,string	build: newJBBPackage(name, version: string): JBBPackage	
getJBBRepo	build.html#getJBBRepo,JBBPackage,string	build: getJBBRepo(pkg: JBBPackage; outdir: string)	
loadJBBInfo	build.html#loadJBBInfo,string	build: loadJBBInfo(outdir: string): JBBPackage	
saveJBBInfo	build.html#saveJBBInfo,JBBPackage,string	build: saveJBBInfo(pkg: JBBPackage; outdir: string)	
dlJBBRequires	build.html#dlJBBRequires,JBBPackage,string	build: dlJBBRequires(pkg: JBBPackage; outdir: string)	
downloadJBB	build.html#downloadJBB,JBBPackage,string	build: downloadJBB(pkg: JBBPackage; outdir: string; main = true)	
getJBBLDeps	build.html#getJBBLDeps,JBBPackage,string,bool	build: getJBBLDeps(pkg: JBBPackage; outdir: string; shared: bool; main = true): seq[string]	
setDefines	build.html#setDefines.m	build: setDefines(defs: static openArray[string]): untyped	
clearDefines	build.html#clearDefines.m	build: clearDefines(): untyped	
isDefined	build.html#isDefined.m,untyped	build: isDefined(def: untyped): untyped	
getHeader	build.html#getHeader.m,static[string],static[string],static[string],static[string],static[string],static[string],static[string],static[string],static[string],static[string],static[string],static[openArray[BuildType]]	build: getHeader(header: static[string]; giturl: static[string] = &quot;&quot;;\n          dlurl: static[string] = &quot;&quot;; conanuri: static[string] = &quot;&quot;;\n          jbburi: static[string] = &quot;&quot;; outdir: static[string] = &quot;&quot;;\n          libdir: static[string] = &quot;&quot;; conFlags: static[string] = &quot;&quot;;\n          cmakeFlags: static[string] = &quot;&quot;; makeFlags: static[string] = &quot;&quot;;\n          altNames: static[string] = &quot;&quot;;\n          buildTypes: static[openArray[BuildType]] = [btCmake, btAutoconf]): untyped	
